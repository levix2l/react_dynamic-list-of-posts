{"version":3,"sources":["api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/Comments/Comments.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUserPosts","userId","a","fetch","response","json","getAllUsers","getPostDetails","postId","PostsList","props","useState","posts","setPost","selectPost","clearPost","selectedPost","selectedUser","useEffect","fetchPosts","postsFromServer","className","map","post","title","type","onClick","id","getAllComments","addComment","name","email","body","method","headers","JSON","stringify","deleteComment","commentId","NewCommentForm","newName","setNewName","newEmail","setNewEmail","newBody","setNewBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","Comments","comments","setComments","loadComments","fetchComments","commentsFromServer","addNewComment","deleteSelectedComment","length","comment","PostDetails","postDetails","setPostDetails","showComments","setShowComments","fetchPostDetails","postFromServer","App","selectedPostId","setSelectedPostId","selectedUserId","setSelectedUserId","users","setUsers","fetchUsers","usersFromServer","htmlFor","user","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.536810fc.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getUserPosts(userId: number): Promise<Post[]> {\n  let response;\n\n  if (userId === 0) {\n    response = await fetch(`${BASE_URL}/posts`);\n  } else {\n    response = await fetch(`${BASE_URL}/posts?userId=${userId}`);\n  }\n\n  return response.json();\n}\n\nexport async function getAllUsers(): Promise<User[]> {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  return response.json();\n}\n\nexport async function getPostDetails(postId: number): Promise<Post> {\n  const response = await fetch(`${BASE_URL}/posts/${postId}`);\n\n  return response.json();\n}\n","import React, { useState, useEffect } from 'react';\nimport './PostsList.scss';\n\nimport { getUserPosts } from '../../api/posts';\n\ntype Props = {\n  selectPost: (postId: number) => void;\n  clearPost: () => void;\n  selectedPost: number;\n  selectedUser: number;\n};\n\nexport const PostsList: React.FC<Props> = (props) => {\n  const [posts, setPost] = useState<Post[]>([]);\n\n  const {\n    selectPost,\n    clearPost,\n    selectedPost,\n    selectedUser,\n  } = props;\n\n  useEffect(() => {\n    const fetchPosts = async () => {\n      const postsFromServer = await getUserPosts(selectedUser);\n\n      setPost(postsFromServer);\n    };\n\n    fetchPosts();\n  }, [selectedUser]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <>\n            <li className=\"PostsList__item\">\n              <div>\n                <b>\n                  {`[User #${post.userId}]: `}\n                </b>\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={post.id === selectedPost\n                  ? clearPost\n                  : () => selectPost(+post.id)}\n              >\n                {post.id === selectedPost ? 'Close' : 'Open'}\n              </button>\n            </li>\n          </>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getAllComments(postId: number): Promise<PostComment[]> {\n  const response = await fetch(`${BASE_URL}/comments?postId=${postId}`);\n\n  return response.json();\n}\n\nexport async function addComment(\n  postId: number,\n  name: string,\n  email: string,\n  body: string,\n): Promise<PostComment[]> {\n  const response = await fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=utf-8',\n    },\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body,\n    }),\n  });\n\n  return response.json();\n}\n\nexport async function deleteComment(commentId: number) {\n  const response = await fetch(`${BASE_URL}/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  addComment: (title: string, email: string, body: string) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ addComment }) => {\n  const [newName, setNewName] = useState('');\n  const [newEmail, setNewEmail] = useState('');\n  const [newBody, setNewBody] = useState('');\n\n  const clearInput = () => {\n    setNewName('');\n    setNewEmail('');\n    setNewBody('');\n  };\n\n  const handleSumbitForm = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    addComment(newName, newEmail, newBody);\n    clearInput();\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSumbitForm}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={newName}\n          onChange={(event) => setNewName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={newEmail}\n          onChange={(event) => setNewEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={newBody}\n          onChange={(event) => setNewBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { getAllComments, addComment, deleteComment } from '../../api/comments';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport './Comments.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const Comments: React.FC<Props> = ({ postId }) => {\n  const [comments, setComments] = useState<PostComment[]>([]);\n\n  const loadComments = () => {\n    const fetchComments = async () => {\n      const commentsFromServer = await getAllComments(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    fetchComments();\n  };\n\n  const addNewComment = async (title: string, email: string, body: string) => {\n    await addComment(postId, title, email, body);\n    await loadComments();\n  };\n\n  const deleteSelectedComment = async (commentId: number) => {\n    await deleteComment(commentId);\n    await loadComments();\n  };\n\n  useEffect(() => {\n    loadComments();\n  }, [postId]);\n\n  return (\n    <div>\n      {comments.length > 0 ? (\n        <section className=\"PostDetails__comments\">\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\">\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteSelectedComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        </section>\n      ) : <p className=\"PostDetails__comments\">No comments</p>}\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm addComment={addNewComment} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nimport { getPostDetails } from '../../api/posts';\n\nimport { Comments } from '../Comments';\n\nimport './PostDetails.scss';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [postDetails, setPostDetails] = useState<Post | null>(null);\n  const [showComments, setShowComments] = useState(true);\n\n  useEffect(() => {\n    const fetchPostDetails = async () => {\n      const postFromServer = await getPostDetails(postId);\n\n      setPostDetails(postFromServer);\n    };\n\n    fetchPostDetails();\n  }, [postId]);\n\n  const hideComments = () => {\n    setShowComments(!showComments);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{postDetails?.body}</p>\n      </section>\n\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={hideComments}\n      >\n        Hide comments\n      </button>\n\n      {showComments\n        ? (<Comments postId={postId} />)\n        : <p className=\"PostDetails__comments\">Comments hidden</p>}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nimport { getAllUsers } from './api/posts';\n\nconst App: React.FC = () => {\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      const usersFromServer = await getAllUsers();\n\n      setUsers(usersFromServer);\n    };\n\n    fetchUsers();\n  }, []);\n\n  const selectPostId = (postId: number) => {\n    setSelectedPostId(postId);\n  };\n\n  const clearPostId = () => {\n    setSelectedPostId(0);\n  };\n\n  const selectUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUserId(+event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n          <select\n            className=\"App__user-selector\"\n            value={`${selectedUserId}`}\n            onChange={selectUserId}\n          >\n            <option key=\"0\" value=\"\">All users</option>\n            {users.map(user => (\n              <option\n                key={user.id}\n                value={user.id}\n              >\n                {user.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedPost={selectedPostId}\n            selectedUser={selectedUserId}\n            selectPost={selectPostId}\n            clearPost={clearPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId\n            ? (<PostDetails postId={selectedPostId} />)\n            : <p>No post selected</p>}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}